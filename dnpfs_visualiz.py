# import sys
# sys.path.append(r'E:\cpp\opencv')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load data from output.csv generated by the C program
log_df = pd.read_csv("E:\\OS scheduling Algo\\dnpfs_log.csv")


# Plot Gantt-like Chart for Execution Timeline
plt.figure(figsize=(14, 4))
for i in range(1, len(log_df)):
    if log_df.iloc[i]['PID'] != -1:
        plt.barh(y=0, width=1, left=log_df.iloc[i]['Time'], label=f"P{log_df.iloc[i]['PID']}" if i == 1 else "", color=plt.cm.tab20(log_df.iloc[i]['PID'] % 20))
plt.title('Process Execution Timeline (Gantt Chart)')
plt.xlabel('Time')
plt.yticks([])
plt.tight_layout()
plt.savefig('gantt_chart.png')
plt.show()

# Load summary manually for demonstration (you can automate reading from a file)
# Replace this part with actual data from the C program or modify C to output this
summary_data = {
    'PID': [1, 2, 3],
    'Waiting Time': [5, 3, 6],
    'Turnaround Time': [15, 10, 18]
}
summary_df = pd.DataFrame(summary_data)

# Plot Waiting Time Bar Chart
plt.figure(figsize=(6, 4))
sns.barplot(x='PID', y='Waiting Time', data=summary_df, palette='Blues_d')
plt.title('Waiting Time per Process')
plt.tight_layout()
plt.savefig('waiting_time.png')
plt.show()

# Plot Turnaround Time Bar Chart
plt.figure(figsize=(6, 4))
sns.barplot(x='PID', y='Turnaround Time', data=summary_df, palette='Greens_d')
plt.title('Turnaround Time per Process')
plt.tight_layout()
plt.savefig('turnaround_time.png')
plt.show()
